/**
 * auth.js
 * Module de gestion de l'authentification des utilisateurs avec GoodBarber
 * Pour l'application Bilan Vital
 */

// Configuration (constante globale)
const AUTH_CONFIG = {
  // Durée de vie du token en millisecondes (4 heures)
  TOKEN_EXPIRATION: 4 * 60 * 60 * 1000,
  // Noms des clés de stockage local
  STORAGE_KEYS: {
    AUTH_TOKEN: 'bilanVital_authToken',
    USER_ID: 'bilanVital_userId',
    USER_PROFILE: 'bilanVital_userProfile',
    TOKEN_EXPIRY: 'bilanVital_tokenExpiry'
  },
  // Domaines autorisés (pour la vérification du référent)
  VALID_DOMAINS: [
    'goodbarber.com',
    'elanvital.goodbarber.com',
    'app-elanvital.goodbarber.com',
    // Ajoutez ici d'autres domaines autorisés si nécessaire
  ]
};

/**
 * Classe principale de gestion de l'authentification
 */
class AuthManager {
  constructor() {
    this.isAuthenticated = false;
    this.userId = null;
    this.userProfile = null;
    this.authToken = null;
    this.tokenExpiry = null;
    
    // Initialiser l'état d'authentification au chargement
    this.initAuthState();
    
    // Mise en place des callbacks GoodBarber
    this.setupGoodBarberCallbacks();
  }

  /**
   * Configure les callbacks pour l'API GoodBarber
   */
  setupGoodBarberCallbacks() {
    // Callback de succès d'authentification
    window.gbDidSuccessAuthentication = (user) => {
      console.log('Authentification GoodBarber réussie:', user);
      
      if (user && user.userId) {
        // Stocker les informations d'authentification
        this.setAuthData(user.userId, user);
        
        // Émettre un événement d'authentification réussie
        this.emitAuthEvent('auth:success', { userId: user.userId });
      }
    };
    
    // Callback d'échec d'authentification
    window.gbDidFailAuthentication = (errorMessage) => {
      console.error('Échec d\'authentification GoodBarber:', errorMessage);
      this.clearAuthData();
      
      // Émettre un événement d'échec d'authentification
      this.emitAuthEvent('auth:fail', { error: errorMessage });
    };
  }

  /**
   * Émet un événement personnalisé lié à l'authentification
   * @param {string} eventName - Nom de l'événement
   * @param {object} data - Données associées à l'événement
   */
  emitAuthEvent(eventName, data) {
    const event = new CustomEvent(eventName, { detail: data });
    document.dispatchEvent(event);
  }

  /**
   * Initialise l'état d'authentification à partir du stockage local et des paramètres d'URL
   */
  initAuthState() {
    // Récupérer les informations d'authentification stockées
    this.loadStoredAuthData();
    
    // Vérifier la validité du token stocké
    if (this.isTokenValid()) {
      this.isAuthenticated = true;
      console.log('Utilisateur déjà authentifié avec ID:', this.userId);
    } else {
      // Effacer les données d'authentification expirées
      this.clearAuthData();
      
      // Tenter de récupérer les informations d'authentification depuis l'URL
      this.processAuthFromUrl();
    }

    // Vérifier le référent pour la sécurité
    if (!this.checkReferrer() && !this.isDevEnvironment()) {
      console.warn('Référent non autorisé détecté');
      this.redirectToGoodBarber('invalid_referrer');
      return;
    }

    // Si l'utilisateur n'est pas authentifié et qu'on n'est pas en mode dev,
    // vérifier s'il s'agit d'une section restreinte
    if (!this.isAuthenticated && !this.isDevEnvironment() && this.isRestrictedSection()) {
      this.redirectToGoodBarber('auth_required');
    }
  }

  /**
   * Vérifie si la section actuelle est restreinte aux utilisateurs authentifiés
   * @returns {boolean} - Vrai si la section est restreinte
   */
  isRestrictedSection() {
    // À personnaliser selon votre configuration GoodBarber
    // Par défaut, on considère que toutes les sections sont restreintes
    return true;
  }

  /**
   * Vérifie si l'utilisateur actuel est un abonné
   * @returns {boolean} - Vrai si l'utilisateur est un abonné
   */
  isSubscriber() {
    if (!this.isAuthenticated || !this.userProfile) {
      return false;
    }
    
    // Vérifier les attributs du profil utilisateur pour déterminer s'il est abonné
    const userAttribs = this.userProfile.attribs || {};
    
    // Exemple : vérification d'un champ personnalisé 'subscription_status'
    return userAttribs.subscription_status === 'active';
  }

  /**
   * Charge les données d'authentification stockées localement
   */
  loadStoredAuthData() {
    try {
      this.authToken = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.AUTH_TOKEN);
      this.userId = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID);
      this.tokenExpiry = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.TOKEN_EXPIRY);
      
      const userProfileStr = localStorage.getItem(AUTH_CONFIG.STORAGE_KEYS.USER_PROFILE);
      if (userProfileStr) {
        this.userProfile = JSON.parse(userProfileStr);
      }
    } catch (error) {
      console.error('Erreur lors du chargement des données d\'authentification:', error);
      this.clearAuthData();
    }
  }

  // Le reste des méthodes reste en camelCase car ce sont des fonctions

  /**
   * Vérifie si le token d'authentification est valide et non expiré
   * @returns {boolean} - Vrai si le token est valide
   */
  isTokenValid() {
    // Vérifier que le token existe
    if (!this.authToken || !this.tokenExpiry) {
      return false;
    }
    
    // Vérifier que le token n'est pas expiré
    const expiryTime = parseInt(this.tokenExpiry, 10);
    const currentTime = Date.now();
    
    return !isNaN(expiryTime) && expiryTime > currentTime;
  }

  /**
   * Enregistre les données d'authentification
   * @param {string} userId - L'identifiant de l'utilisateur
   * @param {object} userProfile - Le profil de l'utilisateur
   */
  setAuthData(userId, userProfile) {
    this.userId = userId;
    this.userProfile = userProfile;
    // Générer un token simple basé sur l'ID utilisateur et la date/heure actuelle
    this.authToken = `${userId}_${Date.now()}`;
    this.tokenExpiry = (Date.now() + AUTH_CONFIG.TOKEN_EXPIRATION).toString();
    this.isAuthenticated = true;
    
    // Stocker dans le localStorage
    try {
      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.AUTH_TOKEN, this.authToken);
      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.USER_ID, userId);
      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.TOKEN_EXPIRY, this.tokenExpiry);
      localStorage.setItem(AUTH_CONFIG.STORAGE_KEYS.USER_PROFILE, JSON.stringify(userProfile));
    } catch (error) {
      console.error('Erreur lors de l\'enregistrement des données d\'authentification:', error);
    }
  }

  // ... autres méthodes de la classe ...
}

// Instance unique pour toute l'application
const authManager = new AuthManager();

// Exporter l'instance pour utilisation dans d'autres modules
export default authManager;